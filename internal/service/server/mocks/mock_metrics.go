// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mihailtudos/metrickit/internal/service/server (interfaces: Metrics)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/mihailtudos/metrickit/internal/domain/entities"
	storage "github.com/mihailtudos/metrickit/internal/infrastructure/storage"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMetrics) Create(arg0 entities.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockMetricsMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMetrics)(nil).Create), arg0)
}

// Get mocks base method.
func (m *MockMetrics) Get(arg0 entities.MetricName, arg1 entities.MetricType) (entities.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(entities.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricsMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetrics)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockMetrics) GetAll() (*storage.MetricsStorage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(*storage.MetricsStorage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricsMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetrics)(nil).GetAll))
}

// GetAllByType mocks base method.
func (m *MockMetrics) GetAllByType(arg0 entities.MetricType) (map[entities.MetricName]entities.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByType", arg0)
	ret0, _ := ret[0].(map[entities.MetricName]entities.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByType indicates an expected call of GetAllByType.
func (mr *MockMetricsMockRecorder) GetAllByType(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByType", reflect.TypeOf((*MockMetrics)(nil).GetAllByType), arg0)
}

// StoreMetricsBatch mocks base method.
func (m *MockMetrics) StoreMetricsBatch(arg0 []entities.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMetricsBatch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreMetricsBatch indicates an expected call of StoreMetricsBatch.
func (mr *MockMetricsMockRecorder) StoreMetricsBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMetricsBatch", reflect.TypeOf((*MockMetrics)(nil).StoreMetricsBatch), arg0)
}
