// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: metrics/metrics.proto

package metrics

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	ErrSkip = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Metric) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Metric with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MetricMultiError, or nil if none found.
func (m *Metric) ValidateAll() error {
	return m.validate(true)
}

func (m *Metric) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := MetricValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Metric_MType_InLookup[m.GetMType()]; !ok {
		err := MetricValidationError{
			field:  "MType",
			reason: "value must be in list [gauge counter]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Value != nil {

		if m.GetValue() < 0 {
			err := MetricValidationError{
				field:  "Value",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Delta != nil {

		if m.GetDelta() < 0 {
			err := MetricValidationError{
				field:  "Delta",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return MetricMultiError(errors)
	}

	return nil
}

// MetricMultiError is an error wrapping multiple validation errors returned by
// Metric.ValidateAll() if the designated constraints aren't met.
type MetricMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricMultiError) AllErrors() []error { return m }

// MetricValidationError is the validation error returned by Metric.Validate if
// the designated constraints aren't met.
type MetricValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricValidationError) ErrorName() string { return "MetricValidationError" }

// Error satisfies the builtin error interface
func (e MetricValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetric.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricValidationError{}

var _Metric_MType_InLookup = map[string]struct{}{
	"gauge":   {},
	"counter": {},
}

// Validate checks the field values on CreateMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetricRequestMultiError, or nil if none found.
func (m *CreateMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMetricRequestValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMetricRequestValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMetricRequestMultiError(errors)
	}

	return nil
}

// CreateMetricRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMetricRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetricRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetricRequestMultiError) AllErrors() []error { return m }

// CreateMetricRequestValidationError is the validation error returned by
// CreateMetricRequest.Validate if the designated constraints aren't met.
type CreateMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricRequestValidationError) ErrorName() string {
	return "CreateMetricRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricRequestValidationError{}

// Validate checks the field values on CreateMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetricResponseMultiError, or nil if none found.
func (m *CreateMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateMetricResponseMultiError(errors)
	}

	return nil
}

// CreateMetricResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMetricResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetricResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetricResponseMultiError) AllErrors() []error { return m }

// CreateMetricResponseValidationError is the validation error returned by
// CreateMetricResponse.Validate if the designated constraints aren't met.
type CreateMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricResponseValidationError) ErrorName() string {
	return "CreateMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricResponseValidationError{}

// Validate checks the field values on CreateMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetricsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetricsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetricsRequestMultiError, or nil if none found.
func (m *CreateMetricsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetricsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetrics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMetricsRequestValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMetricsRequestValidationError{
						field:  fmt.Sprintf("Metrics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMetricsRequestValidationError{
					field:  fmt.Sprintf("Metrics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMetricsRequestMultiError(errors)
	}

	return nil
}

// CreateMetricsRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMetricsRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMetricsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetricsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetricsRequestMultiError) AllErrors() []error { return m }

// CreateMetricsRequestValidationError is the validation error returned by
// CreateMetricsRequest.Validate if the designated constraints aren't met.
type CreateMetricsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricsRequestValidationError) ErrorName() string {
	return "CreateMetricsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetricsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricsRequestValidationError{}

// Validate checks the field values on CreateMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMetricsResponseMultiError, or nil if none found.
func (m *CreateMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateMetricsResponseMultiError(errors)
	}

	return nil
}

// CreateMetricsResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMetricsResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMetricsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMetricsResponseMultiError) AllErrors() []error { return m }

// CreateMetricsResponseValidationError is the validation error returned by
// CreateMetricsResponse.Validate if the designated constraints aren't met.
type CreateMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMetricsResponseValidationError) ErrorName() string {
	return "CreateMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMetricsResponseValidationError{}

// Validate checks the field values on GetMetricRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMetricRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricRequestMultiError, or nil if none found.
func (m *GetMetricRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetMetricRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _GetMetricRequest_MType_InLookup[m.GetMType()]; !ok {
		err := GetMetricRequestValidationError{
			field:  "MType",
			reason: "value must be in list [gauge counter]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetMetricRequestMultiError(errors)
	}

	return nil
}

// GetMetricRequestMultiError is an error wrapping multiple validation errors
// returned by GetMetricRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMetricRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricRequestMultiError) AllErrors() []error { return m }

// GetMetricRequestValidationError is the validation error returned by
// GetMetricRequest.Validate if the designated constraints aren't met.
type GetMetricRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricRequestValidationError) ErrorName() string { return "GetMetricRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMetricRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricRequestValidationError{}

var _GetMetricRequest_MType_InLookup = map[string]struct{}{
	"gauge":   {},
	"counter": {},
}

// Validate checks the field values on GetMetricResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMetricResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricResponseMultiError, or nil if none found.
func (m *GetMetricResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMetric()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMetricResponseValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMetricResponseValidationError{
					field:  "Metric",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetric()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMetricResponseValidationError{
				field:  "Metric",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return GetMetricResponseMultiError(errors)
	}

	return nil
}

// GetMetricResponseMultiError is an error wrapping multiple validation errors
// returned by GetMetricResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMetricResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricResponseMultiError) AllErrors() []error { return m }

// GetMetricResponseValidationError is the validation error returned by
// GetMetricResponse.Validate if the designated constraints aren't met.
type GetMetricResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricResponseValidationError) ErrorName() string {
	return "GetMetricResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricResponseValidationError{}

// Validate checks the field values on GetMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetricsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetricsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetricsResponseMultiError, or nil if none found.
func (m *GetMetricsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetricsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMetric() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMetricsResponseValidationError{
						field:  fmt.Sprintf("Metric[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMetricsResponseValidationError{
						field:  fmt.Sprintf("Metric[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMetricsResponseValidationError{
					field:  fmt.Sprintf("Metric[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	if len(errors) > 0 {
		return GetMetricsResponseMultiError(errors)
	}

	return nil
}

// GetMetricsResponseMultiError is an error wrapping multiple validation errors
// returned by GetMetricsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMetricsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetricsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetricsResponseMultiError) AllErrors() []error { return m }

// GetMetricsResponseValidationError is the validation error returned by
// GetMetricsResponse.Validate if the designated constraints aren't met.
type GetMetricsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetricsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetricsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetricsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetricsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetricsResponseValidationError) ErrorName() string {
	return "GetMetricsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetricsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetricsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetricsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetricsResponseValidationError{}
